@model ABCRetails.Models.Order
@inject ABCRetails.Services.IAzureStorageService StorageService

@{
    ViewData["Title"] = "Order Details";

    // Get product image URL
    string productImageUrl = string.Empty;
    var product = await StorageService.GetEntityAsync<Product>("Product", Model.ProductId);
    if (product != null)
    {
        productImageUrl = product.ImageUrl;
    }
}

<!-- Enhanced Header with Block Bubble Effect -->
<div class="header-bubble mb-4">
    <h1 class="text-white">Order Details</h1>
    <div class="bubble-decoration">
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-9">
        <div class="shadow-sm p-4 bg-white rounded">
            <!-- Order Information -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Order Information</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-details mb-0">
                            <tbody>
                                <tr>
                                    <td class="label-cell">Order ID</td>
                                    <td class="value-cell">@Html.DisplayFor(model => model.OrderId)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Customer</td>
                                    <td class="value-cell">@Html.DisplayFor(model => model.Username)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Customer ID</td>
                                    <td class="value-cell">@Html.DisplayFor(model => model.CustomerId)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Product ID</td>
                                    <td class="value-cell">
                                        <span class="product-id-badge">@Html.DisplayFor(model => model.ProductId)</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Product Name</td>
                                    <td class="value-cell">@Html.DisplayFor(model => model.ProductName)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Order Date</td>
                                    <td class="value-cell">@Model.OrderDate.ToShortDateString()</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Order Details -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Order Details</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-details mb-0">
                            <tbody>
                                <tr>
                                    <td class="label-cell">Quantity</td>
                                    <td class="value-cell">@Html.DisplayFor(model => model.Quantity)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Unit Price</td>
                                    <td class="value-cell price-cell">@Model.UnitPrice.ToString("C")</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Total Price</td>
                                    <td class="value-cell price-cell total-price">@Model.TotalPrice.ToString("C")</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Status</td>
                                    <td class="value-cell">
                                        <span class="status-badge status-@Model.Status.ToLower()">
                                            @Html.DisplayFor(model => model.Status)
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- System Information -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">System Information</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-details mb-0">
                            <tbody>
                                <tr>
                                    <td class="label-cell">Partition Key</td>
                                    <td class="value-cell system-info">@Html.DisplayFor(model => model.PartitionKey)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Row Key</td>
                                    <td class="value-cell system-info">@Html.DisplayFor(model => model.RowKey)</td>
                                </tr>
                                <tr>
                                    <td class="label-cell">Timestamp</td>
                                    <td class="value-cell system-info">@Html.DisplayFor(model => model.Timestamp)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Action buttons -->
            <div class="d-flex justify-content-between">
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> Back to List
                </a>
                <a asp-action="Edit" asp-route-id="@Model.RowKey" class="btn btn-primary px-4">
                    <i class="fas fa-edit me-1"></i> Edit Order
                </a>
            </div>
        </div>
    </div>

    <!-- Product Image -->
    <div class="col-md-3">
        <div class="card shadow-sm sticky-top" style="top: 1rem;">
            <div class="card-header bg-light text-center">
                <h6 class="mb-0">Product Image</h6>
            </div>
            <div class="card-body text-center">
                @if (!string.IsNullOrEmpty(productImageUrl))
                {
                    <img src="@productImageUrl" alt="Product Image"
                         class="img-fluid rounded mb-2 border" style="max-height: 220px;" />
                    
                }
                else
                {
                    <p class="text-muted">No image available</p>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Enhanced Header with Bubble Effect */
        .header-bubble {
            background: linear-gradient(135deg, #4e54c8, #8f94fb);
            padding: 1.5rem 2rem;
            border-radius: 16px;
            position: relative;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(78, 84, 200, 0.3);
        }

            .header-bubble h1 {
                font-weight: 700;
                font-size: 2.5rem;
                margin: 0;
                position: relative;
                z-index: 2;
                text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
            }

        .bubble-decoration {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .bubble {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
        }

            .bubble:nth-child(1) {
                width: 80px;
                height: 80px;
                top: -20px;
                right: 30px;
            }

            .bubble:nth-child(2) {
                width: 60px;
                height: 60px;
                bottom: -15px;
                left: 40px;
            }

            .bubble:nth-child(3) {
                width: 40px;
                height: 40px;
                bottom: 30px;
                right: 60px;
            }

        /* Enhanced Table Styles */
        .table-details {
            margin-bottom: 0;
        }

            .table-details tbody tr {
                transition: background-color 0.2s;
            }

                .table-details tbody tr:hover {
                    background-color: rgba(78, 84, 200, 0.03);
                }

        .label-cell {
            width: 35%;
            font-weight: 600;
            color: #495057;
            padding: 1rem 1.5rem;
            border-right: 1px solid #dee2e6;
            background-color: #f8f9fa;
        }

        .value-cell {
            padding: 1rem 1.5rem;
            color: #212529;
            font-weight: 500;
        }

        /* Product ID Badge */
        .product-id-badge {
            display: inline-block;
            padding: 0.35em 0.65em;
            font-size: 0.875em;
            font-weight: 600;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.375rem;
            background-color: #e9ecef;
            color: #495057;
            border: 1px solid #dee2e6;
        }

        /* Status Badges */
        .status-badge {
            display: inline-block;
            padding: 0.35rem 0.65rem;
            font-size: 0.875rem;
            font-weight: 600;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.375rem;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .status-processing {
            background-color: #cce7ff;
            color: #004085;
            border: 1px solid #b3d7ff;
        }

        .status-completed {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-cancelled {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Price Styling */
        .price-cell {
            font-weight: 600;
            color: #198754;
        }

        .total-price {
            font-size: 1.1rem;
            color: #0f5132;
        }

        /* System Information */
        .system-info {
            font-family: monospace;
            font-size: 0.9rem;
            color: #6c757d;
        }

        /* Card header enhancements */
        .card-header {
            border-bottom: 2px solid rgba(78, 84, 200, 0.1);
        }

        /* Hover effects for buttons */
        .btn {
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(to right, #4e54c8, #8f94fb);
            border: none;
        }

            .btn-primary:hover {
                background: linear-gradient(to right, #3a3fb8, #7a80f0);
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(78, 84, 200, 0.3);
            }

        .btn-outline-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Add status class based on the current status
        document.addEventListener('DOMContentLoaded', function() {
            const statusElement = document.querySelector('.status-badge');
            if (statusElement) {
                const status = statusElement.textContent.trim().toLowerCase();
                statusElement.classList.add('status-' + status);
            }
        });
    </script>
}